plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdkVersion 34
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        versionCode sdk_version_code
        versionName "${rustore_billingclient_version}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

ext {
    sdk_lib_dependence = "ru.rustore.sdk:billingclient:$rustore_billingclient_version$rustore_sdk_type"
}

dependencies {

    implementation "$sdk_lib_dependence"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation "androidx.fragment:fragment:1.3.0"
    implementation project(path: ':RuStoreGodotCore')
    compileOnly fileTree(dir: '../libs', include: ['*.aar', '*.jar'], exclude: [])
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task copyAARGodot(type: Copy) {
    from    ( [buildDir.absolutePath, 'outputs', 'aar'].join(File.separator) )
    include ( "${project.name}-release.aar" )
    into    ( [rootDir.absolutePath, '..', 'godot_example', 'android', 'plugins', "${project.name}" ].join(File.separator) )
    rename  ("${project.name}-release.aar", "${project.name}.aar")
}

task generateGdapFile {
    doLast {
        def content = """[config]
name="${project.name}"
binary_type="local"
binary="${project.name}/${project.name}.aar"

[dependencies]
remote=["$sdk_lib_dependence", "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22"]
"""

        def outputFile = file("../../godot_example/android/plugins/${project.name}.gdap")

        outputFile.parentFile.mkdirs()
        outputFile.write(content)
    }
}

afterEvaluate {
    assembleRelease.finalizedBy('copyAARGodot')
    assembleRelease.finalizedBy('generateGdapFile')
}
